{"version":3,"sources":["data/category.js","components/header/Header.js","components/definitions/Definitions.js","App.js","index.js"],"names":["categories","value","label","Header","category","setCategory","word","setWord","lightMode","darkTheme","createTheme","palette","primary","main","type","className","ThemeProvider","theme","TextField","onChange","e","target","select","language","map","option","MenuItem","Definitions","meanings","src","phonetics","audio","style","backgroundColor","borderRadius","controls","mean","item","definitions","def","color","definition","width","example","synonyms","syn","App","useState","setMeanings","setLightMode","ThemeSwitcher","withStyles","switchBase","grey","checked","track","Switch","dictionaryApi","a","axios","get","data","console","log","useEffect","height","transition","Container","maxWidth","display","flexDirection","justifyContent","position","top","right","paddingTop","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.411eb432.chunk.js","sourcesContent":["const categories = [\n  { value: \"English\", label: \"en\" },\n  { value: \"Hindi\", label: \"hi\" },\n  { value: \"Spanish\", label: \"es\" },\n  { value: \"French\", label: \"fr\" },\n  { value: \"Japanese\", label: \"ja\" },\n  { value: \"Russian\", label: \"ru\" },\n  { value: \"German\", label: \"de\" },\n  { value: \"Italian\", label: \"it\" },\n  { value: \"Korean\", label: \"ko\" },\n  { value: \"Brazilian Portuguese\", label: \"pt-BR\" },\n  { value: \"Arabic\", label: \"ar\" },\n  { value: \"Turkish\", label: \"tr\" },\n];\n\nexport default categories;\n","import React from \"react\";\nimport \"./Header.css\";\nimport {\n  TextField,\n  ThemeProvider,\n  createTheme,\n  MenuItem,\n} from \"@material-ui/core\";\nimport categories from \"../../data/category\";\n\nconst Header = ({ category, setCategory, word, setWord, lightMode }) => {\n  // Material UI Dark Theme\n  const darkTheme = createTheme({\n    palette: {\n      primary: {\n        main: lightMode ? \"#000\" : \"#fff\",\n      },\n      type: lightMode ? \"light\" : \"dark\",\n    },\n  });\n\n  // event handler for selecting a language\n  const handleChange = (language) => {\n    setCategory(language);\n    setWord(\"\");\n  };\n\n  return (\n    <div className=\"header\">\n      <span className=\"title\">{word ? word : \"Word Hunt\"}</span>\n      <div className=\"inputs\">\n        {/* Material UI Theme Provider Component */}\n        <ThemeProvider theme={darkTheme}>\n          {/* Material UI TextField Component */}\n          <TextField\n            className=\"search\"\n            label=\"Enter a word\"\n            value={word}\n            onChange={(e) => setWord(e.target.value)}\n          />\n          <TextField\n            className=\"select\"\n            select\n            label=\"Language\"\n            value={category}\n            onChange={(e) => handleChange(e.target.value)}\n          >\n            {categories.map((option) => (\n              <MenuItem key={option.label} value={option.label}>\n                {option.value}\n              </MenuItem>\n            ))}\n          </TextField>\n        </ThemeProvider>\n      </div>\n    </div>\n  );\n};\n\nexport default Header;\n","import React from \"react\";\nimport \"./Definitions.css\";\n\nconst Definitions = ({ word, meanings, category, lightMode }) => {\n  return (\n    <div className=\"meanings\">\n      {/* Render audio element if it exists, the language is english and a search has been initiated */}\n      {meanings[0] && word && category === \"en\" && (\n        <audio\n          src={meanings[0].phonetics[0] && meanings[0].phonetics[0].audio}\n          style={{ backgroundColor: \"#fff\", borderRadius: 10 }}\n          controls\n        >\n          Your browser does not support the audio element\n        </audio>\n      )}\n      {/* Render different subtitles depending on if a search has been initialized or not */}\n      {word === \"\" ? (\n        <span className=\"subTitle\">Start by typing a word in search</span>\n      ) : (\n        meanings.map((mean) =>\n          mean.meanings.map((item) =>\n            item.definitions.map((def) => (\n              <div\n                className=\"singleMean\"\n                style={{\n                  backgroundColor: lightMode ? \"#3b5360\" : \"white\",\n                  color: lightMode ? \"white\" : \"black\",\n                }}\n              >\n                {/* Render definitions, examples and synonyms when they can be provided by the API */}\n                <b>{def.definition}</b>\n                <hr style={{ backgroundColor: \"white\", width: \"100%\" }}></hr>\n                {def.example && (\n                  <span>\n                    <b>Example: </b>\n                    {def.example}\n                  </span>\n                )}\n                {def.synonyms && (\n                  <span>\n                    <b>Synonyms: </b>\n                    {def.synonyms.map((syn) => `${syn}, `)}\n                  </span>\n                )}\n              </div>\n            ))\n          )\n        )\n      )}\n    </div>\n  );\n};\n\nexport default Definitions;\n","import \"./App.css\";\nimport axios from \"axios\";\nimport { useEffect, useState } from \"react\";\nimport { Container, withStyles, Switch } from \"@material-ui/core\";\nimport Header from \"./components/header/Header\";\nimport Definitions from \"./components/definitions/Definitions\";\nimport { grey } from \"@material-ui/core/colors\";\n\nfunction App() {\n  // state management\n  const [meanings, setMeanings] = useState([]);\n  const [word, setWord] = useState(\"\");\n  const [category, setCategory] = useState(\"en\");\n  const [lightMode, setLightMode] = useState(false);\n\n  // Material UI Component for switching between Light / Dark Mode\n  const ThemeSwitcher = withStyles({\n    switchBase: {\n      color: grey[50],\n      \"&$checked\": {\n        color: grey[900],\n      },\n      \"&$checked + $track\": {\n        backgroundColor: grey[500],\n      },\n    },\n    checked: {},\n    track: {},\n  })(Switch);\n\n  // fetch data from API\n  const dictionaryApi = async () => {\n    try {\n      const data = await axios.get(\n        `https://api.dictionaryapi.dev/api/v2/entries/${category}/${word}`\n      );\n      // console.log(data);\n      setMeanings(data.data);\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  // console.log(meanings);\n  // use dictionaryApi if the values for word and category are changed\n  useEffect(() => {\n    dictionaryApi();\n  }, [word, category]);\n\n  return (\n    <div\n      className=\"App\"\n      style={{\n        backgroundColor: lightMode ? \"#fff\" : \"#282c34\",\n        color: lightMode ? \"black\" : \"white\",\n        height: \"100vh\",\n        transition: \"all 0.5s linear\",\n      }}\n    >\n      <Container\n        maxWidth=\"md\"\n        style={{\n          display: \"flex\",\n          flexDirection: \"column\",\n          height: \"100vh\",\n          justifyContent: \"space-evenly\",\n        }}\n      >\n        <div\n          style={{ position: \"absolute\", top: 0, right: 15, paddingTop: 10 }}\n        >\n          <span>{lightMode ? \"Dark\" : \"Light\"} Mode</span>\n          <ThemeSwitcher\n            checked={lightMode}\n            onChange={() => setLightMode(!lightMode)}\n          />\n        </div>\n        <Header\n          category={category}\n          setCategory={setCategory}\n          word={word}\n          setWord={setWord}\n          lightMode={lightMode}\n        />\n        {meanings && (\n          <Definitions\n            word={word}\n            meanings={meanings}\n            category={category}\n            lightMode={lightMode}\n          />\n        )}\n      </Container>\n    </div>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}